name: " Build & Deploy"

on:
  push:
    branches: [ "master" , "development", "MARK-53"]
    # paths:
    #  - deploy/**
    #  - label_studio/**
    #  - setup.py
    #  - .github/workflows/docker-build.yml
    tags: [ '*' ]

env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_TAG: ${{echo "d=$(date '+%Y-%m-%d')"}}.${{ github.run_number }}
  REGISTRY: containers.git.digitalbrain.cn
  GITHOST: git.digitalbrain.cn
  RELEASEART: v1
  ARTFILENAME: deploy_art
  DEVHOST: 124.71.161.146
  QAHOST: 124.71.161.146

jobs:
  docker_build_and_push:
    name: "Docker build and push"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Override image tag on 'tag'
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "DOCKER_TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

      - name: Override registry üõéÔ∏è
        if: github.repository == 'Shanghai-Digital-Brain-Laboratory/label-studio'
        run: |
          echo "REGISTRY=ghcr.io" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      # - name: Set up Docker Buildx üèóÔ∏è
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python üîß
        # uses: actions/setup-python@v4.1.0
        uses: actions/setup-python@master
        with:
          python-version: '3.8'

      - name: Create version_.py
        run: |
          python3 $(pwd)/label_studio/core/version.py
          cat $(pwd)/label_studio/core/version_.py

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Build and push üöÄ
      #   uses: docker/build-push-action@v3
      #   id: docker_build_and_push
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.DOCKER_TAG}}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

  deploy_dev:
    needs: [docker_build_and_push]
    runs-on: ubuntu-latest
    environment: 
      name: deveopment
      url: http://${{env.DEVHOST}}/dev
    steps:
      - name: publish with docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          # password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo '${{env.DOCKER_TAG}}'
            rm -rf dev
            mkdir dev && cd dev
            echo ${{ secrets.PAT }} | gh auth login -p https -h ${{env.GITHOST}} --with-token < /dev/stdin
            gh release download ${{ env.RELEASEART }} -p '${{ env.ARTFILENAME }}*' -R ${{env.GITHOST}}/${{ github.repository }}
            tar -xzvf ${{ env.ARTFILENAME }}.tar.gz
            mv ${{ env.ARTFILENAME }} dev-env && cd dev-env
            echo ${{ secrets.PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            export ENV=dev
            docker-compose pull
            docker-compose down
            docker-compose up -d

  deploy_qa:
    needs: [docker_build_and_push]
    runs-on: ubuntu-latest
    environment: 
      name: qa
      url: http://${{env.QAHOST}}/qa
    steps:
      - name: publish with docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          # password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            rm -rf qa
            mkdir qa && cd qa
            echo ${{ secrets.PAT }} | gh auth login -p https -h ${{env.GITHOST}} --with-token < /dev/stdin
            gh release download ${{ env.RELEASEART }} -p '${{ env.ARTFILENAME }}*' -R ${{env.GITHOST}}/${{ github.repository }}
            tar -xzvf ${{ env.ARTFILENAME }}.tar.gz
            mv ${{ env.ARTFILENAME }} qa-env && cd qa-env
            echo ${{ secrets.PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            export ENV=qa
            docker-compose pull
            docker-compose down
            docker-compose up -d

  deploy_prod:
    needs: [deploy_qa]
    runs-on: ubuntu-latest
    environment: 
      name: production
      #url: http://${{ secrets.DEV_HOST }}/
    steps:
      - name: publish
        run: echo 'publishing'
